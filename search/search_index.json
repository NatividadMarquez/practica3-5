{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"practica3-5/","text":"Natividad M\u00e1rquez Baena Pr\u00e1ctica 3.5: Despliegue de una aplicaci\u00f3n Flask (Python) 1. Prerrequisitos 2. Introducci\u00f3n 3. Procedimiento completo para el despliegue 4. Crear los archivos necesarios 5. Comprobaci\u00f3n de gunicorn 6. Compronar gunicorn como servicio 7. Configurar nginx 8. Probar la aplicaci\u00f3n y su ejecuci\u00f3n 9. Repetir el proceso con un repositorio de github Prerrequisitos Para la pr\u00e1ctica se deben partir de ciertos elementos previos, en un servidor Debian para realizar el despliegue: Nginx: Servidor web para manejar las solicitudes y respuestas. Gunicorn: Servidor WSGI que conecta el servidor web con la aplicaci\u00f3n Flask. Pipenv: Herramienta para gestionar entornos virtuales y dependencias en Python. Introducci\u00f3n El objetivo de esta pr\u00e1ctica es aprender a desplegar una aplicaci\u00f3n web desarrollada con Flask (Python) en un entorno de producci\u00f3n, utilizando herramientas como gunicorn, nginx y pipenv. Gunicorn se usa como servidor WSGI para manejar solicitudes y respuestas entre la aplicaci\u00f3n y el servidor web. Nginx servir\u00e1 como servidor web para gestionar el tr\u00e1fico y servir la aplicaci\u00f3n. Por \u00faltimo con Pipenv se crear\u00e1 un entorno virtual. Se persigue garantizar un despliegue seguro, funcional y accesible en un entorno de producci\u00f3n. Procedimiento completo para el despliegue Primeramente se instala el gestor de paquetes de Python pip y tambien el servidor de aplicaciones gunicorn: Comprobamos que se ha instalado correctamente la versi\u00f3n con: Creamos el directorio en el que almacenaremos nuestro proyecto. Adem\u00e1s, es importante otorgarle permisos a nuestro usuario y que pertenezca al grupo www-data. Con esto se permite que el servidor web y tu usuario puedan acceder y modificar los archivos del proyecto.Para ello se usa chown : Ahora se va a crear la estructura del proyecto: En el directorio creado, se crear\u00e1 un archivo oculto que contendr\u00e1 las variables de entorno necesarias. En el archivo se a\u00f1aden las variables de manera que una ser\u00e1 el archivo py y otra el entorno production . Se crea un entorno virtual con pipenv shell para asegurar que las dependencias del proyecto no afecten al sistema actual. A continuaci\u00f3n se instalar\u00e1 Flask para desarrollar la aplicaci\u00f3n, y Gunicorn para ejecutar la aplicaci\u00f3n en un entorno de producci\u00f3n. Crear los archivos necesarios Ahora se crea la aplicaci\u00f3n de ejemplo. Para ello se crea un archivo application.py con la l\u00f3gica del proyecto y wsgi.py , que configura c\u00f3mo se ejecutar\u00e1 Flask a trav\u00e9s de Gunicorn. Ahora se prueba el funcionamiento de la aplicaci\u00f3n en el servidor web integrado de Flask y accedemos a la direcci\u00f3n que obtenemos: Como podemos comprobar, se puede acceder correctamente cpn http://IP-maq-virtual:5000: Comprobaci\u00f3n de gunicorn Se comprueba que Gunicorn funciona correctamente, ya que act\u00faa como intermediario entre Flask y Nginx en producci\u00f3n: gunicorn --workers 4 --bind 0.0.0.0:5000 wsgi:app Es importante que se tome nota de cual es el path o ruta desde la que se ejecuta gunicorn para poder configurar m\u00e1s adelante un servicio del sistema. Esto se hace mediante el uso de which gunicorn : Compronar gunicorn como servicio Se va a hacer uso de nginx, por lo que se inicializa y se comprueba su estado. Ahora que se ha iniciado, se crea un archivo de servicio de systemd para que gunicorn se ejecute como servicio del sistema, con el siguiente contenido: Ahora se habilita e inicia el servicio creado Hacemos un systemctl status para comprobar el estado del servicio y que funciona. Configurar nginx Se crear\u00e1 una archivo de configuraci\u00f3n de nginx con el nombre de nuestra aplicaci\u00f3n y se establece la siguiente configuraci\u00f3n: Se crea un link simb\u00f3lico del archivo creado desde sitios webs disponibles a sitios web activos, es decir, del directorio sites-available a sites-enabled . Posteriormente lo comprobamos con un ls -l Finalmente se comprueba si el archivo es correcto con sudo nginx -t y se reinicia nginx para posteriormente comprobar el estado de este. Probar la aplicaci\u00f3n y su ejecuci\u00f3n Ya no es posible acceder por IP a nuestra aplicaci\u00f3n ya que ahora est\u00e1 siendo servida por Gunicorn y Nginx, necesitamos acceder por su server_name . Para ello se modifica el archivo /etc/hosts de nuestra m\u00e1quina anfitriona para que asocie la IP de la m\u00e1quina virtual, a nuestro server_name . La ruta absoluta del archivo es C:\\Windows\\System32\\drivers\\etc\\hosts Y se deber\u00e1n a\u00f1adir la l\u00ednea: 192.168.X.X myproject www.myproject Ahora se deber\u00eda de poder acceder a la aplicaci\u00f3n desde la m\u00e1quina anfitriona con http://www.nombre_aplicacion . Repetir el proceso con un repositorio de github En esta parte se repetir\u00e1 el proceso con una aplicaci\u00f3n de github. Para ello se clonar\u00e1 el siguiente repositorio git clone https://github.com/raul-profesor/Practica-3.5 , del cual se obtendr\u00e1n los paquetes necesarios. El repositorio se clonar\u00e1 en /var/www . Se otorgan los permisos de la misma manera: Ya en el directorio de la pr\u00e1ctica, se arranca el entorno y se instalan las dependencias haciendo uso del archivo obtenido en el repositorio pipenv install -r requirements.txt . Se comprueba la ejecuci\u00f3n de la aplicaci\u00f3n: Y obtenemos el siguiente resultado. Ahora se comprobar\u00e1 la aplicaci\u00f3n localmente Repitiendo los pasos anteriores, se configura gunicorn como servicio Se comprueba el estado Creamos un archivo de servicio con el siguiente contenido: A continuaci\u00f3n, se crea el archivo de configuraci\u00f3n de nginx en el directorio de sitios disponibles Se crea su enlace simb\u00f3lico, se mueve al directorio se sitios activos y se comprueba que se ha realizado correctamente el proceso A continuaci\u00f3n se realiza la comprobaci\u00f3n sobre la sintaxis de los archivos, se reinicia el servicio y se comprueba su estado Como en el procedimiento anterios, se modificar\u00e1 el archivo /etc/hosts de la m\u00e1quina anfitriona, donde a\u00f1adiremos una l\u00ednea para asociar el nombre del servidor con su IP. Finalmente, deber\u00edamos de poder acceder a la aplicaci\u00f3n mediante la b\u00fasqueda con http://www.nombre_aplicacion .","title":"Practica3 5"},{"location":"practica3-5/#practica-35-despliegue-de-una-aplicacion-flask-python","text":"1. Prerrequisitos 2. Introducci\u00f3n 3. Procedimiento completo para el despliegue 4. Crear los archivos necesarios 5. Comprobaci\u00f3n de gunicorn 6. Compronar gunicorn como servicio 7. Configurar nginx 8. Probar la aplicaci\u00f3n y su ejecuci\u00f3n 9. Repetir el proceso con un repositorio de github","title":"Pr\u00e1ctica 3.5: Despliegue de una aplicaci\u00f3n Flask (Python)"},{"location":"practica3-5/#prerrequisitos","text":"Para la pr\u00e1ctica se deben partir de ciertos elementos previos, en un servidor Debian para realizar el despliegue: Nginx: Servidor web para manejar las solicitudes y respuestas. Gunicorn: Servidor WSGI que conecta el servidor web con la aplicaci\u00f3n Flask. Pipenv: Herramienta para gestionar entornos virtuales y dependencias en Python.","title":"Prerrequisitos"},{"location":"practica3-5/#introduccion","text":"El objetivo de esta pr\u00e1ctica es aprender a desplegar una aplicaci\u00f3n web desarrollada con Flask (Python) en un entorno de producci\u00f3n, utilizando herramientas como gunicorn, nginx y pipenv. Gunicorn se usa como servidor WSGI para manejar solicitudes y respuestas entre la aplicaci\u00f3n y el servidor web. Nginx servir\u00e1 como servidor web para gestionar el tr\u00e1fico y servir la aplicaci\u00f3n. Por \u00faltimo con Pipenv se crear\u00e1 un entorno virtual. Se persigue garantizar un despliegue seguro, funcional y accesible en un entorno de producci\u00f3n.","title":"Introducci\u00f3n"},{"location":"practica3-5/#procedimiento-completo-para-el-despliegue","text":"Primeramente se instala el gestor de paquetes de Python pip y tambien el servidor de aplicaciones gunicorn: Comprobamos que se ha instalado correctamente la versi\u00f3n con: Creamos el directorio en el que almacenaremos nuestro proyecto. Adem\u00e1s, es importante otorgarle permisos a nuestro usuario y que pertenezca al grupo www-data. Con esto se permite que el servidor web y tu usuario puedan acceder y modificar los archivos del proyecto.Para ello se usa chown : Ahora se va a crear la estructura del proyecto: En el directorio creado, se crear\u00e1 un archivo oculto que contendr\u00e1 las variables de entorno necesarias. En el archivo se a\u00f1aden las variables de manera que una ser\u00e1 el archivo py y otra el entorno production . Se crea un entorno virtual con pipenv shell para asegurar que las dependencias del proyecto no afecten al sistema actual. A continuaci\u00f3n se instalar\u00e1 Flask para desarrollar la aplicaci\u00f3n, y Gunicorn para ejecutar la aplicaci\u00f3n en un entorno de producci\u00f3n.","title":"Procedimiento completo para el despliegue"},{"location":"practica3-5/#crear-los-archivos-necesarios","text":"Ahora se crea la aplicaci\u00f3n de ejemplo. Para ello se crea un archivo application.py con la l\u00f3gica del proyecto y wsgi.py , que configura c\u00f3mo se ejecutar\u00e1 Flask a trav\u00e9s de Gunicorn. Ahora se prueba el funcionamiento de la aplicaci\u00f3n en el servidor web integrado de Flask y accedemos a la direcci\u00f3n que obtenemos: Como podemos comprobar, se puede acceder correctamente cpn http://IP-maq-virtual:5000:","title":"Crear los archivos necesarios"},{"location":"practica3-5/#comprobacion-de-gunicorn","text":"Se comprueba que Gunicorn funciona correctamente, ya que act\u00faa como intermediario entre Flask y Nginx en producci\u00f3n: gunicorn --workers 4 --bind 0.0.0.0:5000 wsgi:app Es importante que se tome nota de cual es el path o ruta desde la que se ejecuta gunicorn para poder configurar m\u00e1s adelante un servicio del sistema. Esto se hace mediante el uso de which gunicorn :","title":"Comprobaci\u00f3n de gunicorn"},{"location":"practica3-5/#compronar-gunicorn-como-servicio","text":"Se va a hacer uso de nginx, por lo que se inicializa y se comprueba su estado. Ahora que se ha iniciado, se crea un archivo de servicio de systemd para que gunicorn se ejecute como servicio del sistema, con el siguiente contenido: Ahora se habilita e inicia el servicio creado Hacemos un systemctl status para comprobar el estado del servicio y que funciona.","title":"Compronar gunicorn como servicio"},{"location":"practica3-5/#configurar-nginx","text":"Se crear\u00e1 una archivo de configuraci\u00f3n de nginx con el nombre de nuestra aplicaci\u00f3n y se establece la siguiente configuraci\u00f3n: Se crea un link simb\u00f3lico del archivo creado desde sitios webs disponibles a sitios web activos, es decir, del directorio sites-available a sites-enabled . Posteriormente lo comprobamos con un ls -l Finalmente se comprueba si el archivo es correcto con sudo nginx -t y se reinicia nginx para posteriormente comprobar el estado de este.","title":"Configurar nginx"},{"location":"practica3-5/#probar-la-aplicacion-y-su-ejecucion","text":"Ya no es posible acceder por IP a nuestra aplicaci\u00f3n ya que ahora est\u00e1 siendo servida por Gunicorn y Nginx, necesitamos acceder por su server_name . Para ello se modifica el archivo /etc/hosts de nuestra m\u00e1quina anfitriona para que asocie la IP de la m\u00e1quina virtual, a nuestro server_name . La ruta absoluta del archivo es C:\\Windows\\System32\\drivers\\etc\\hosts Y se deber\u00e1n a\u00f1adir la l\u00ednea: 192.168.X.X myproject www.myproject Ahora se deber\u00eda de poder acceder a la aplicaci\u00f3n desde la m\u00e1quina anfitriona con http://www.nombre_aplicacion .","title":"Probar la aplicaci\u00f3n y su ejecuci\u00f3n"},{"location":"practica3-5/#repetir-el-proceso-con-un-repositorio-de-github","text":"En esta parte se repetir\u00e1 el proceso con una aplicaci\u00f3n de github. Para ello se clonar\u00e1 el siguiente repositorio git clone https://github.com/raul-profesor/Practica-3.5 , del cual se obtendr\u00e1n los paquetes necesarios. El repositorio se clonar\u00e1 en /var/www . Se otorgan los permisos de la misma manera: Ya en el directorio de la pr\u00e1ctica, se arranca el entorno y se instalan las dependencias haciendo uso del archivo obtenido en el repositorio pipenv install -r requirements.txt . Se comprueba la ejecuci\u00f3n de la aplicaci\u00f3n: Y obtenemos el siguiente resultado. Ahora se comprobar\u00e1 la aplicaci\u00f3n localmente Repitiendo los pasos anteriores, se configura gunicorn como servicio Se comprueba el estado Creamos un archivo de servicio con el siguiente contenido: A continuaci\u00f3n, se crea el archivo de configuraci\u00f3n de nginx en el directorio de sitios disponibles Se crea su enlace simb\u00f3lico, se mueve al directorio se sitios activos y se comprueba que se ha realizado correctamente el proceso A continuaci\u00f3n se realiza la comprobaci\u00f3n sobre la sintaxis de los archivos, se reinicia el servicio y se comprueba su estado Como en el procedimiento anterios, se modificar\u00e1 el archivo /etc/hosts de la m\u00e1quina anfitriona, donde a\u00f1adiremos una l\u00ednea para asociar el nombre del servidor con su IP. Finalmente, deber\u00edamos de poder acceder a la aplicaci\u00f3n mediante la b\u00fasqueda con http://www.nombre_aplicacion .","title":"Repetir el proceso con un repositorio de github"}]}